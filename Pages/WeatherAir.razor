@page "/air"
@using System.Globalization;
@using RetoNasaAPI.Modelos;
@using RetoNasaAPI.Modelos.ModelosAira;
@using RetoNasaAPI.Modelos.ModelosApp;
@using RetoNasaAPI.Utilities;
@using System.Net.Http.Json;

<h3>Weather</h3>

<div class="input-group mb-3 mt-3">
    <input class="form-control" type="text" @bind=city placeholder="City name" />
    <div>
        <button class="btn btn-outline-secondary" @onclick=GetWeatherAir>Search</button>
    </div>
</div>



@if (weatherDataAir != null)
{
    <div class="text-center">
        <p class="display-5">@city</p>
        <p class="display-1">@weatherDataAir.hourly?.time?[0]</p>
        <p class="display-6">@weatherDataAir.timezone</p>
    </div>
@if (cityData != null && cityData.results.Length > 0)
{
    <ul>
        @foreach (Result item in cityData.results)
        {
            <button class="btn btn-outline-secondary" @onclick="() => buscar(item)">@item.formatted</button>
        }
    </ul>
}
    @if (!string.IsNullOrEmpty(selectedCity) && weatherDataAir.hourly != null)
    {
        // Obtén el índice de la ciudad seleccionada
        var index = ListaPaises.IndexOf(selectedCity);

        if (index >= 0 && index < weatherDataAir.current_units.time.Length)
        {
            <div class="card-group">
                @for (int i = 0; i < Math.Min(weatherDataAir.hourly.time.Length, 24); i++)
                {
                    <RetoNasaAPI.Components.WeatherCardAir Hora="@weatherDataAir.hourly.time[i]"
                                                           CarbonMonoxide="@weatherDataAir.hourly.carbon_monoxide[i]"
                                                           NitrogenDioxide="@weatherDataAir.hourly.nitrogen_dioxide[i]"
                                                           Ozone="@weatherDataAir.hourly.ozone[i]"
                                                           Dust="@weatherDataAir.hourly.dust[i]"
                                                           PM10="@weatherDataAir.hourly.pm10[i]"
                                                           PM2_5="@weatherDataAir.hourly.pm2_5[i]"
                                                           UVIndex="@weatherDataAir.hourly.uv_index[i]">
                    </RetoNasaAPI.Components.WeatherCardAir>
                }

            </div>
        }
        else
        {
            <p>@nocity</p>
        }

        
    }
}
else
{
    <p>@nocity</p>
}

<style>
    .input-group {
        margin: 20px auto;
    }

    .form-control {
        width: 70%;
    }

    .btn {
        background-color: #007BFF;
        color: #fff;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .display-5 {
        font-size: 1.5rem;
        color: #007BFF;
    }

    .display-1 {
        font-size: 3rem;
        color: #007BFF;
    }

    .display-6 {
        font-size: 1rem;
        color: #333;
    }

    .card-group {
        display: grid;
        grid-template-columns: repeat(5, 1fr); /* Muestra 5 tarjetas por fila */
        gap: 20px;
        margin: 20px auto;
    }
</style>

@code {
    string city = "";
    float latitud = 0;
    float longitud = 0;
    List<string>? ListaPaises = new List<string>(); // Mueve la declaración aquí
    WheatherModelAir? weatherDataAir;
    CityData cityData;
    string nocity = "";
    string selectedCity = string.Empty;
    HttpClient Client = new HttpClient();

    async Task GetWeatherAir()
    {
        weatherDataAir = null;
        cityData = await GetCityData();

        if (cityData != null && cityData.results.Length > 0)
        {
            latitud = cityData.results[0].lat;
            longitud = cityData.results[0].lon;
            ListaPaises.Clear(); // Limpia la lista antes de agregar nuevas ciudades
            for (int i = 0; i < cityData.results.Length; i++)
            {
                ListaPaises.Add(cityData.results[i].formatted);
            }
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
            weatherDataAir = await Client.GetFromJsonAsync<WheatherModelAir>(Endpoint.GetWeatherEndPointAir(latitud, longitud));
            CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("es-es");
        }
        else
        {
            // City not found
            nocity = "City not found";
        }
    }

    async Task buscar(Result aa)
    {
        latitud = aa.lat;
        longitud = aa.lon;
        selectedCity = aa.formatted; // Asegúrate de actualizar selectedCity aquí.
        Console.WriteLine(selectedCity); // Agrega esta línea para depurar.
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
        weatherDataAir = await Client.GetFromJsonAsync<WheatherModelAir>(Endpoint.GetWeatherEndPointAir(latitud, longitud));
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("es-es");
    }

    async Task<CityData> GetCityData()
    {
        var cityData2 = await Client.GetFromJsonAsync<CityData>(Endpoint.getGeoApify(city));
        return cityData2;
    }
}
